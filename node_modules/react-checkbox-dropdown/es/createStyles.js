var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function createStyles(_ref) {
  var _ref$container = _ref.container,
      container = _ref$container === undefined ? function (_ref2) {
    var isOpen = _ref2.isOpen,
        isFocused = _ref2.isFocused;

    return {};
  } : _ref$container,
      _ref$options = _ref.options,
      options = _ref$options === undefined ? function (_ref3) {
    var isOpen = _ref3.isOpen;

    return {};
  } : _ref$options,
      _ref$option = _ref.option,
      option = _ref$option === undefined ? function (_ref4) {
    var isHovered = _ref4.isHovered,
        isFocused = _ref4.isFocused,
        isSelected = _ref4.isSelected;

    return {};
  } : _ref$option,
      _ref$toggleButton = _ref.toggleButton,
      toggleButton = _ref$toggleButton === undefined ? function (_ref5) {
    var isOpen = _ref5.isOpen,
        isFocused = _ref5.isFocused;

    return {};
  } : _ref$toggleButton,
      _ref$displayText = _ref.displayText,
      displayText = _ref$displayText === undefined ? function (_ref6) {
    var isOpen = _ref6.isOpen,
        isFocused = _ref6.isFocused;

    return {};
  } : _ref$displayText,
      _ref$checkboxBody = _ref.checkboxBody,
      checkboxBody = _ref$checkboxBody === undefined ? function (_ref7) {
    var isChecked = _ref7.isChecked,
        isHovered = _ref7.isHovered;

    return {};
  } : _ref$checkboxBody,
      _ref$checkboxDot = _ref.checkboxDot,
      checkboxDot = _ref$checkboxDot === undefined ? function () {
    return {};
  } : _ref$checkboxDot,
      _ref$addValue = _ref.addValue,
      addValue = _ref$addValue === undefined ? function (_ref8) {
    var isInputShown = _ref8.isInputShown,
        isSuccess = _ref8.isSuccess;

    return {};
  } : _ref$addValue,
      _ref$addValueButton = _ref.addValueButton,
      addValueButton = _ref$addValueButton === undefined ? function (_ref9) {
    var isInputShown = _ref9.isInputShown,
        isSuccess = _ref9.isSuccess;

    return {};
  } : _ref$addValueButton,
      _ref$addValueInput = _ref.addValueInput,
      addValueInput = _ref$addValueInput === undefined ? function (_ref10) {
    var isFocused = _ref10.isFocused,
        isSuccess = _ref10.isSuccess;

    return {};
  } : _ref$addValueInput,
      _ref$tagsContainer = _ref.tagsContainer,
      tagsContainer = _ref$tagsContainer === undefined ? function () {
    return {};
  } : _ref$tagsContainer,
      _ref$tag = _ref.tag,
      tag = _ref$tag === undefined ? function (_ref11) {
    var isHovered = _ref11.isHovered;

    return {};
  } : _ref$tag;

  var fakeState = {
    isOpen: false,
    isClosed: true,
    isHovered: false,
    isFocused: false,
    isSelected: true
  };
  var theStylesObject = arguments[0];
  var methodNames = ['container', 'options', 'option', 'toggleButton', 'displayText', 'checkboxBody', 'checkboxDot', 'addValue', 'addValueButton', 'addValueInput', 'tagsContainer', 'tag'];
  for (var method in theStylesObject) {
    // checking for the styles object method names
    if (!methodNames.includes(method)) {
      throw Error('the  ' + method + ' must be named as one of the following array ' + methodNames);
    }
    // check if every method of the styles object is a function
    if (typeof theStylesObject[method] !== 'function') {
      throw Error('the  ' + method + ' must be a function returing an object containing the styles');
    }
    // check if every method returns an object
    if (_typeof(theStylesObject[method](fakeState)) !== 'object') {
      throw Error('the function ' + method + ' must return an object containing the styles');
    }
  }
  return {
    container: container,
    options: options,
    option: option,
    toggleButton: toggleButton,
    displayText: displayText,
    checkboxBody: checkboxBody,
    checkboxDot: checkboxDot,
    addValue: addValue,
    addValueButton: addValueButton,
    addValueInput: addValueInput,
    tagsContainer: tagsContainer,
    tag: tag
  };
}

export default createStyles;