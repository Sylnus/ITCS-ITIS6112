var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React, { useState } from 'react';
import PropTypes from 'prop-types';

var Input = function Input(_ref) {
  var value = _ref.value,
      onChange = _ref.onChange,
      showInput = _ref.showInput,
      placeholder = _ref.placeholder,
      isSuccess = _ref.isSuccess,
      onSubmit = _ref.onSubmit,
      styleFunc = _ref.styleFunc;

  var _useState = useState(false),
      isFocused = _useState[0],
      setFocus = _useState[1];

  var handleKeyDown = function handleKeyDown(event) {
    if (isFocused) {
      console.log(event.keyCode);
      if (event.keyCode === 13) {
        onSubmit();
      }
    }
  };

  return showInput ? React.createElement('input', {
    type: 'text',
    value: value,
    onChange: onChange,
    onKeyDown: handleKeyDown,
    onFocus: function onFocus() {
      setFocus(true);
    },
    onBlur: function onBlur() {
      setFocus(false);
    },
    style: _extends({
      height: '50px',
      width: '100%',
      border: '1px solid ' + (!isSuccess ? '#dc3545' : '#000'),
      borderRadius: '12px',
      marginRight: '20px',
      paddingLeft: '10px',
      fontSize: '18px'
    }, styleFunc({ isFocused: isFocused, isSuccess: isSuccess })),
    placeholder: !isSuccess ? 'Please enter a valid option' : ''
  }) : React.createElement(
    'p',
    { className: 'placeholder' },
    placeholder
  );
};

Input.propTypes = process.env.NODE_ENV !== "production" ? {
  value: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
  showInput: PropTypes.bool.isRequired,
  placeholder: PropTypes.string.isRequired,
  isSuccess: PropTypes.bool.isRequired,
  onSubmit: PropTypes.func.isRequired,
  styleFunc: PropTypes.func.isRequired
} : {};

export default Input;