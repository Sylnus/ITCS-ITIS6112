var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import React, { useState, useRef, useEffect } from 'react';
import PropTypes from 'prop-types';

import Options from './components/Options';
import Option from './components/Option';
import CheckBox from './components/Checkbox';
import Tags from './components/Tags';
import Tag from './components/Tag';
import AddValue from './components/AddValue';

import initOptions from './helpers/initOptions';
import checkSelectedOption from './helpers/checkSelectedOption';
import { UpIcon, DownIcon, XIcon, AddIcon } from './icons';
import createStyles from './createStyles';

function CheckboxDropdownComponent(_ref) {
  var options = _ref.options,
      value = _ref.value,
      displayText = _ref.displayText,
      onChange = _ref.onChange,
      onOpen = _ref.onOpen,
      onClose = _ref.onClose,
      checkAddedValue = _ref.checkAddedValue,
      style = _ref.style,
      openIcon = _ref.openIcon,
      closeIcon = _ref.closeIcon,
      tagXIcon = _ref.tagXIcon,
      addIcon = _ref.addIcon,
      isStrict = _ref.isStrict,
      onDeselectOption = _ref.onDeselectOption,
      displayTags = _ref.displayTags,
      inputPlaceholder = _ref.inputPlaceholder;

  var _useState = useState(false),
      isOpen = _useState[0],
      setOpen = _useState[1];

  var _useState2 = useState(false),
      isFocused = _useState2[0],
      setFocus = _useState2[1];

  var containerRef = useRef(false);

  var container = style.container,
      optionStyles = style.option,
      optionsStyles = style.options,
      toggleButton = style.toggleButton,
      checkboxBody = style.checkboxBody,
      checkboxDot = style.checkboxDot,
      addValue = style.addValue,
      addValueButton = style.addValueButton,
      addValueInput = style.addValueInput,
      displayTextStyles = style.displayText,
      tagsContainer = style.tagsContainer,
      tag = style.tag;


  useEffect(function () {
    // close the dropdown when clicking away
    function onClickAway(event) {
      var node = containerRef.current;
      if (node && !node.contains(event.target)) {
        setOpen(false);
      }
    }

    if (isOpen && containerRef) {
      document.addEventListener('click', onClickAway);
    } else {
      document.removeEventListener('click', onClickAway);
    }
  }, [isOpen, containerRef]);

  useEffect(function () {
    if (isOpen) {
      onOpen();
    } else {
      onClose();
    }
  }, [isOpen]);

  var onCloseTag = function onCloseTag(option) {
    onChange(option);
    onDeselectOption(option);
  };

  var onAddAnother = function onAddAnother(value) {
    var newOption = { label: value, value: value };
    onChange(newOption);
  };

  return React.createElement(
    'div',
    {
      className: 'container',
      ref: containerRef,
      style: _extends({
        width: '100%',
        maxWidth: '570px',
        border: '.5px solid ' + (isFocused ? '#377caf' : '#797474'),
        overflow: 'hidden',
        boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)',
        borderRadius: '5px',
        backgroundColor: '#fff',
        fontFamily: 'SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace'
      }, container({ isOpen: isOpen, isFocused: isFocused }))
    },
    React.createElement(
      'button',
      {
        className: 'display-text-button',
        style: _extends({
          minHeight: '60px',
          display: 'flex',
          alignItems: 'center',
          cursor: 'pointer',
          width: '100%',
          boxShadow: 'none',
          backgroundColor: 'inherit',
          borderRadius: '5px',
          border: '.5px solid transparent',
          padding: '0',
          margin: '0'
        }, toggleButton({ isOpen: isOpen, isFocused: isFocused })),
        onClick: function onClick() {
          setOpen(!isOpen);
        },
        onFocus: function onFocus() {
          setFocus(true);
        },
        onBlur: function onBlur() {
          setFocus(false);
        }
      },
      React.createElement(
        'h3',
        {
          className: 'display-text',
          style: _extends({
            paddingLeft: '22px',
            fontSize: '18px',
            marginRight: 'auto'
          }, displayTextStyles({ isOpen: isOpen, isFocused: isFocused }))
        },
        displayText
      ),
      React.createElement(
        'div',
        {
          className: 'icon',
          style: {
            height: '24px',
            width: '24px',
            marginRight: '10px',
            marginLeft: '10px',
            color: 'red'
          }
        },
        isOpen ? openIcon : closeIcon
      )
    ),
    displayTags && React.createElement(
      Tags,
      { styleFunc: tagsContainer },
      value.map(function (option) {
        return React.createElement(Tag, {
          key: 'tag-' + option.value,
          option: option,
          icon: tagXIcon,
          onDeselect: onCloseTag,
          styleFunc: tag
        });
      })
    ),
    React.createElement(
      Options,
      { isOpen: isOpen, styleFunc: optionsStyles },
      initOptions(options).map(function (option, index) {
        return React.createElement(Option, {
          key: 'option-' + option.value,
          index: index,
          option: option,
          onChange: onChange,
          onDeselectOption: onDeselectOption,
          Checkbox: React.createElement(CheckBox, {
            isChecked: checkSelectedOption(option, value),
            checkboxStyle: checkboxBody,
            checkedStyle: checkboxDot
          }),
          isSelected: checkSelectedOption(option, value),
          styleFunc: optionStyles
        });
      }),
      !isStrict && React.createElement(AddValue, {
        onAddValue: onAddAnother,
        addIcon: addIcon,
        checkAddedValue: checkAddedValue,
        inputPlaceholder: inputPlaceholder,
        styleFunc: addValue,
        inputStyles: addValueInput,
        buttonStyles: addValueButton
      })
    )
  );
}

CheckboxDropdownComponent.propTypes = process.env.NODE_ENV !== "production" ? {
  options: PropTypes.arrayOf(PropTypes.objectOf({
    label: PropTypes.string,
    value: PropTypes.any
  })).isRequired,
  value: PropTypes.arrayOf(PropTypes.objectOf({
    label: PropTypes.string,
    value: PropTypes.string
  })).isRequired,
  displayText: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
  onOpen: PropTypes.func,
  onClose: PropTypes.func,
  checkAddedValue: PropTypes.func,
  style: PropTypes.objectOf({
    container: PropTypes.func,
    option: PropTypes.func,
    options: PropTypes.func,
    toggleButton: PropTypes.func,
    displayText: PropTypes.func,
    checkboxBody: PropTypes.func,
    checkboxDot: PropTypes.func,
    addValue: PropTypes.func,
    addValueButton: PropTypes.func,
    addValueInput: PropTypes.func,
    tagsContainer: PropTypes.func,
    tag: PropTypes.func
  }),
  openIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.element]),
  closeIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.element]),
  tagXIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.element]),
  addIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.element]),
  isStrict: PropTypes.bool,
  onDeselectOption: PropTypes.func,
  displayTags: PropTypes.bool,
  inputPlaceholder: PropTypes.string
} : {};

CheckboxDropdownComponent.defaultProps = {
  onOpen: function onOpen() {},
  onClose: function onClose() {},
  checkAddedValue: function checkAddedValue() {
    return true;
  },

  style: {
    container: function container() {
      return {};
    },
    option: function option() {
      return {};
    },
    options: function options() {
      return {};
    },
    toggleButton: function toggleButton() {
      return {};
    },
    displayText: function displayText() {
      return {};
    },
    checkboxBody: function checkboxBody() {
      return {};
    },
    checkboxDot: function checkboxDot() {
      return {};
    },
    addValue: function addValue() {
      return {};
    },
    addValueButton: function addValueButton() {
      return {};
    },
    addValueInput: function addValueInput() {
      return {};
    },
    tagsContainer: function tagsContainer() {
      return {};
    },
    tag: function tag() {
      return {};
    }
  },
  openIcon: React.createElement(UpIcon, null),
  closeIcon: React.createElement(DownIcon, null),
  tagXIcon: React.createElement(XIcon, null),
  addIcon: React.createElement(AddIcon, null),
  isStrict: true,
  onDeselectOption: function onDeselectOption() {},

  displayTags: false,
  inputPlaceholder: 'Add Another Value'
};

export { createStyles };
export default CheckboxDropdownComponent;